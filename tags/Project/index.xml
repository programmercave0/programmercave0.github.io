<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on programmerCave</title>
    <link>https://programmercave.com/tags/Project/</link>
    <description>Recent content in Project on programmerCave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://programmercave.com/tags/Project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Single Elevator Simulation in C&#43;&#43;</title>
      <link>https://programmercave.com/Single-Elevator-Simulation-in-Cpp/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://programmercave.com/Single-Elevator-Simulation-in-Cpp/</guid>
      <description>Here we are going to implement the Single Elevator Simulation in C++. Initially the elevator is at ground floor. It is represented by 0. Floors below ground floor are represented by negative integers. The elevator has maximum capacity it can carry, maximum and minimum floor it can carry to.
The elevator accepts the request of floor the passengers want to go. If the elevator is empty then the first request sets the direction of the elevator.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;: Simple Pendulum Animation on Ubuntu Machine</title>
      <link>https://programmercave.com/C-Simple-Pendulum-Animation-on-Ubuntu-Machine/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://programmercave.com/C-Simple-Pendulum-Animation-on-Ubuntu-Machine/</guid>
      <description>Here is the code to animate simple pendulum on Ubuntu Machine.
We have to add #include &amp;lt;graphics.h&amp;gt; header file.
If you want to install C/C++ graphic.h header file on Ubuntu you can visit this post. How to Install graphics.h C/C++ library on Ubuntu
We have to also write int gd = DETECT, gm; initgraph(&amp;amp;gd, &amp;amp;gm, NULL);
initgraph() initializes the graphics system by loading a graphics driver from disk (or validating a registered driver), and putting the system into graphics mode.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;: Tic Tac Toe</title>
      <link>https://programmercave.com/C-Tic-Tac-Toe/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://programmercave.com/C-Tic-Tac-Toe/</guid>
      <description>Here is the simple C++ implementation of Tic Tac Toe.
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; void draw_board(const std::vector&amp;lt; std::vector&amp;lt;char&amp;gt; &amp;gt;&amp;amp; vec) { std::cout &amp;lt;&amp;lt; &amp;#34; 0 1 2 \n&amp;#34;; std::cout &amp;lt;&amp;lt; &amp;#34; +---+---+---+\n&amp;#34;; for (int i = 0; i &amp;lt; vec.size(); i++) { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34; ; for (int j = 0; j &amp;lt; vec[i].size(); j++) { std::cout &amp;lt;&amp;lt; &amp;#34;| &amp;#34; &amp;lt;&amp;lt; vec[i][j] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } std::cout &amp;lt;&amp;lt; &amp;#34;|&amp;#34;; std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; std::cout &amp;lt;&amp;lt; &amp;#34; +---+---+---+\n&amp;#34;; } } void enter(unsigned int row, unsigned int col, char ch, std::vector&amp;lt; std::vector&amp;lt;char&amp;gt; &amp;gt;&amp;amp; vec) { vec[row][col] = ch; } bool check(const std::vector&amp;lt; std::vector&amp;lt;char&amp;gt; &amp;gt;&amp;amp; vec) { //to check diagonals  if ((vec[0][0] == &amp;#39;X&amp;#39; &amp;amp;&amp;amp; vec[1][1] == &amp;#39;X&amp;#39; &amp;amp;&amp;amp; vec[2][2] == &amp;#39;X&amp;#39;) || (vec[0][2] == &amp;#39;X&amp;#39; &amp;amp;&amp;amp; vec[1][1] == &amp;#39;X&amp;#39; &amp;amp;&amp;amp; vec[2][0] == &amp;#39;X&amp;#39;)) { std::cout &amp;lt;&amp;lt; &amp;#34;Player X won this game\n&amp;#34;; return true; } else if ((vec[0][0] == &amp;#39;O&amp;#39; &amp;amp;&amp;amp; vec[1][1] == &amp;#39;O&amp;#39; &amp;amp;&amp;amp; vec[2][2] == &amp;#39;O&amp;#39;) || (vec[0][2] == &amp;#39;O&amp;#39; &amp;amp;&amp;amp; vec[1][1] == &amp;#39;O&amp;#39; &amp;amp;&amp;amp; vec[2][0] == &amp;#39;O&amp;#39;)) { std::cout &amp;lt;&amp;lt; &amp;#34;Player O won this game\n&amp;#34;; return true; } //to check horizonatal and vertical  for (int i = 0; i &amp;lt; vec.</description>
    </item>
    
  </channel>
</rss>
